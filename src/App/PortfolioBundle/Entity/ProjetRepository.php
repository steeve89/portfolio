<?php

/*
 * This file is part of the PortfolioBundle.
 *
 * (c) LOKO Steeve <loko.steeve@yahoo.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\PortfolioBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProjetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjetRepository extends EntityRepository
{
    public function getProjets($nombreParPage, $page, $user = null)
    {
        //  On vérifie que la page n'est pas inférieur à 1
        if ($page < 1) {
            throw new \InvalidArgumentException('The argument $page can not be less than one ( value : "'.$page.'" ).');
        }
        //  On recupère la requête
        $query = $this->createQueryBuilder('a')->select('a, p')->leftJoin('a.user', 'u')->leftJoin('a.paiement', 'p');
        if($user):
            $query =    $query->where('a.user = :user')
                        ->andWhere('a.isActived = 1')
                        ->setParameter('user', $user);
        endif;
        //  On recupère la requête
        $query->orderBy('a.id', 'DESC')->getQuery();
        //  On définit l'address à partir duquel commencer la liste
        $query->setFirstResult( ($page-1) * $nombreParPage )
        //  Ainsi que le nombre d'address à afficher
        ->setMaxResults($nombreParPage);
        //  Enfin, on retourne l'objet Paginator correspondant à la requête construite
        return new Paginator($query);
    }
}
