<?php

/*
 * This file is part of the BlogBundle.
 *
 * (c) LOKO Steeve <loko.steeve@yahoo.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CategorieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategorieRepository extends EntityRepository
{
    public function getCategories($nombreParPage, $page)
    {
        //  On vérifie que la page n'est pas inférieur à 1
        if ($page < 1) {
            throw new \InvalidArgumentException('The argument $page can not be less than one ( value : "'.$page.'" ).');
        }
        //  On definie la requête
        $query =   $this->createQueryBuilder('a')
                        ->orderBy('a.nom', 'ASC');       
        //  On recupère la requête
        $query->getQuery();
        //  On définit l'address à partir duquel commencer la liste
        $query->setFirstResult( ($page-1) * $nombreParPage )
        //  Ainsi que le nombre d'address à afficher
        ->setMaxResults($nombreParPage);
        //  Enfin, on retourne l'objet Paginator correspondant à la requête construite
        return new Paginator($query);
    }
    
    public function getBlogCategories($langue)
    {        
        //  On definie la requête
        $query = $this->createQueryBuilder('c')
                        ->select('c, a')
                        ->innerJoin('c.articles', 'a')
                        ->where('c.langue = :langue')
                        ->andWhere('c.isActived = 1')   
                        ->andWhere('a.isActived = 1')   
                        ->setParameter('langue', $langue)                        
                        ->addOrderBy('c.position', 'ASC')
                        ->addOrderBy('a.id', 'DESC')
        ;
        //  On retourne le résultat
        return $query->getQuery()->getResult();
    }
    
    public function getCategorie($slug)
    {        
        //  On definie la requête
        $query = $this->createQueryBuilder('c')
                        ->select('c, a')
                        ->innerJoin('c.articles', 'a')
                        ->where('c.slug = :slug')
                        ->andWhere('c.isActived = 1')   
                        ->andWhere('a.isActived = 1')   
                        ->setParameter('slug', $slug)                        
                        ->orderBy('a.id', 'DESC')
        ;
        //  On retourne le résultat
        return $query->getQuery()->getOneOrNullResult();
    }
}
